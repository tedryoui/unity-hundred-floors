//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Level/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""bf9cb1bc-9ae6-490e-879f-12bc682d4a13"",
            ""actions"": [
                {
                    ""name"": ""Stick"",
                    ""type"": ""Value"",
                    ""id"": ""cd269cdf-c0c4-4847-bbf0-bfba0391e641"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""314f1b0a-4cb8-4c12-ae48-dd3554c21d1c"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Stick"",
            ""id"": ""534f662e-25fe-4c33-b5b6-3b1e46c590be"",
            ""actions"": [
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""afe1ecfc-68f8-47c3-a5ce-ad7b5f69193a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""a561238e-c671-4626-9edb-60375df11e23"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5f215a4-6ef2-4044-b9e0-64554b326e5b"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d83c96d-eab5-4559-9960-61ccbc3e9729"",
                    ""path"": ""<Touchscreen>/primaryTouch/startPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Stick = m_Player.FindAction("Stick", throwIfNotFound: true);
        // Stick
        m_Stick = asset.FindActionMap("Stick", throwIfNotFound: true);
        m_Stick_Direction = m_Stick.FindAction("Direction", throwIfNotFound: true);
        m_Stick_Position = m_Stick.FindAction("Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Stick;
    public struct PlayerActions
    {
        private @InputControls m_Wrapper;
        public PlayerActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Stick => m_Wrapper.m_Player_Stick;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Stick.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStick;
                @Stick.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStick;
                @Stick.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStick;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Stick.started += instance.OnStick;
                @Stick.performed += instance.OnStick;
                @Stick.canceled += instance.OnStick;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Stick
    private readonly InputActionMap m_Stick;
    private IStickActions m_StickActionsCallbackInterface;
    private readonly InputAction m_Stick_Direction;
    private readonly InputAction m_Stick_Position;
    public struct StickActions
    {
        private @InputControls m_Wrapper;
        public StickActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Direction => m_Wrapper.m_Stick_Direction;
        public InputAction @Position => m_Wrapper.m_Stick_Position;
        public InputActionMap Get() { return m_Wrapper.m_Stick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StickActions set) { return set.Get(); }
        public void SetCallbacks(IStickActions instance)
        {
            if (m_Wrapper.m_StickActionsCallbackInterface != null)
            {
                @Direction.started -= m_Wrapper.m_StickActionsCallbackInterface.OnDirection;
                @Direction.performed -= m_Wrapper.m_StickActionsCallbackInterface.OnDirection;
                @Direction.canceled -= m_Wrapper.m_StickActionsCallbackInterface.OnDirection;
                @Position.started -= m_Wrapper.m_StickActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_StickActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_StickActionsCallbackInterface.OnPosition;
            }
            m_Wrapper.m_StickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Direction.started += instance.OnDirection;
                @Direction.performed += instance.OnDirection;
                @Direction.canceled += instance.OnDirection;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }
        }
    }
    public StickActions @Stick => new StickActions(this);
    public interface IPlayerActions
    {
        void OnStick(InputAction.CallbackContext context);
    }
    public interface IStickActions
    {
        void OnDirection(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
